require 'rubygems'
require 'rubytree-0.5.2/lib/tree.rb'
require 'yaml'
require 'dryml_ext.rb'

#--------------------------------------------
# To be put in ApplicationHelper or similar
#--------------------------------------------

def set_initial_result
  []
end

def handle_sub_result(result_output, sub_result_output)
  result_output << sub_result_output if (sub_result_output && !sub_result_output.empty?)
end

def handle_all_results(results_output)
  results_output.join(", ")
end


# result handler
def handle_res_1(arg_result, context) 
  current_context = context[:current]
  par_ctx = Context::parent(context)
  before_ctx = par_ctx[:before]
  if before_ctx
    if before_ctx[:separator] 
      puts "Handle with SEPARATOR!!"             
    end
  end 
  return arg_result, context
end

# register result handlers
# TODO: create convenience method to do registration!
handler = Proc.new {|c,a| handle_res_1(c,a) }

handle_sub_result = Proc.new {|result_output, sub_result_output, ctx| handle_sub_result(result_output, sub_result_output)}
handle_all_results = Proc.new {|results, ctx| handle_all_results(results) }
initial_result = Proc.new {set_initial_result}

config = {:handlers => [handler], :init_result => initial_result, :handle_sub_result => handle_sub_result, :handle_all_results => handle_all_results}

@dryml_ext = DrymlExt.new(config)

def concat_ext(context, *args)  
  @dryml_ext.concat_ext(context, *args)
end


#--------------------------------------------
# An example of a simple DRYML tag method (to be generated by tag def when DRYML compiles a tag!)
#----------------------------------------------
def do_stuff(context)
  current = context[:current]
  # get :before context
  before = current[:before]
  # get variables needed for this tag
  # NOTE: you could also travel the context-tree for other context vars, fx parent/ancestor context vars, using regular RubyTree methods 
  a = before[:a]

  # populate :after context 
  after = {:empty => a != 1}
  current[:after] = after    
  
  return "panel: { title: 'mypanel'}"
end

output = concat_ext(
 {:root => true, :tag => 'root'},
 {
   :context => {:a => 1, :tag => 'a', :separator => true},
   :exec => Proc.new {|parent_context| concat_ext(
     {:nested => true, :parent_context => parent_context, :tree => parent_context[:tree]},
     {
       :context => {:a => 22, :tag => 'c'},
       :exec => Proc.new {|x| do_stuff(x)}
     },
     {
       :context => {:a => 33, :tag => 'c'},
       :exec => Proc.new {|x| do_stuff(x)}
     }

   )}
 },
 {
    :context => {:a => 4, :tag => 'a'},
    :exec => Proc.new {|x| do_stuff(x)}
 } 
)

puts "FINAL OUTPUT:\n"
puts output


